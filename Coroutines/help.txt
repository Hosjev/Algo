A coroutine is a function that can suspend its execution before reaching return, and it can indirectly pass control to another coroutine for some time

(From docs.python.org) Asyncio is often a perfect fit for IO-bound and high-level structured network code.
    --The event loop is the core of every asyncio application. Event loops run asynchronous tasks and callbacks, perform network IO operations, and run subprocesses.


General rules within modules:
async def f(x):
    y = await z(x)  # OK - `await` and `return` allowed in coroutines
    return y

async def g(x):
    yield x  # OK - this is an async generator

async def m(x):
    yield from gen(x)  # No - SyntaxError

def m(x):
    y = await z(x)  # Still no - SyntaxError (no `async def` here)
    return y

EXCEPT pre Py3.5:
@asyncio.coroutine
def py34_coro():
    """Generator-based coroutine, older syntax"""
    yield from stuff()

