class Solution:
	# @param A : list of integers
	# @param B : integer
	# @return a list of list of integers
        # **sum1 (ascending); [sum1, 2] (ascending)
	def combinationSum(self, A, B):
            # Using inner scope
            def combo_helper(placeholder, combos, current, rem):
                if rem == 0:
                    combos.append(list(placeholder))
                    return combos

                # Outer loop on self
                for _ in range(1):
                    if rem - A[current] < 0:
                        break
                    placeholder.append(A[current])
                    combo_helper(placeholder, combos, current, rem - A[current])
                    placeholder.pop()

                    # Inner loop on next
                    # (controls higher level by pop() of range 1 1st run == empty placeholder)
                    for idx in range(current + 1, len(A)):
                        # non-distinct integer check
                        if A[idx] == A[idx - 1]:
                            continue
                        if rem - A[idx] < 0:
                            break
                        placeholder.append(A[idx])
                        combo_helper(placeholder, combos, idx, rem - A[idx])
                        placeholder.pop()

                return combos


            # MAIN
            # Prime
            A.sort()

            return combo_helper([], [], 0, B)


A = [2, 3, 6, 7]
A = [ 8, 10, 6, 11, 1, 16, 8 ]
B = 28
# [[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ], [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 6 ], [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 8 ], [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 10 ], [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 11 ], [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 6 6 ], [1 1 1 1 1 1 1 1 1 1 1 1 1 1 6 8 ], [1 1 1 1 1 1 1 1 1 1 1 1 6 10 ], [1 1 1 1 1 1 1 1 1 1 1 1 8 8 ], [1 1 1 1 1 1 1 1 1 1 1 1 16 ], [1 1 1 1 1 1 1 1 1 1 1 6 11 ], [1 1 1 1 1 1 1 1 1 1 6 6 6 ], [1 1 1 1 1 1 1 1 1 1 8 10 ], [1 1 1 1 1 1 1 1 1 8 11 ], [1 1 1 1 1 1 1 1 6 6 8 ], [1 1 1 1 1 1 1 1 10 10 ], [1 1 1 1 1 1 1 10 11 ], [1 1 1 1 1 1 6 6 10 ], [1 1 1 1 1 1 6 8 8 ], [1 1 1 1 1 1 6 16 ], [1 1 1 1 1 1 11 11 ], [1 1 1 1 1 6 6 11 ], [1 1 1 1 6 6 6 6 ], [1 1 1 1 6 8 10 ], [1 1 1 1 8 8 8 ], [1 1 1 1 8 16 ], [1 1 1 6 8 11 ], [1 1 6 6 6 8 ], [1 1 6 10 10 ], [1 1 8 8 10 ], [1 1 10 16 ], [1 6 10 11 ], [1 8 8 11 ], [1 11 16 ], [6 6 6 10 ], [6 6 8 8 ], [6 6 16 ], [6 11 11 ], [8 10 10 ] ]
# [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 8], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 10], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 11], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 10], [1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 11], [1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 8], [1, 1, 1, 1, 1, 1, 1, 1, 10, 10], [1, 1, 1, 1, 1, 1, 1, 10, 11], [1, 1, 1, 1, 1, 1, 6, 6, 10], [1, 1, 1, 1, 1, 1, 6, 8, 8], [1, 1, 1, 1, 1, 1, 6, 16], [1, 1, 1, 1, 1, 1, 11, 11], [1, 1, 1, 1, 1, 6, 6, 11], [1, 1, 1, 1, 6, 6, 6, 6], [1, 1, 1, 1, 6, 8, 10], [1, 1, 1, 1, 8, 8, 8], [1, 1, 1, 1, 8, 16], [1, 1, 1, 6, 8, 11], [1, 1, 6, 6, 6, 8], [1, 1, 6, 10, 10], [1, 1, 8, 8, 10], [1, 1, 10, 16], [1, 6, 10, 11], [1, 8, 8, 11], [1, 11, 16], [6, 6, 6, 10], [6, 6, 8, 8], [6, 6, 16], [6, 11, 11], [8, 10, 10]]


print(Solution().combinationSum(A, B))
